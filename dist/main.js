(()=>{"use strict";var e={890:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,"html {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\nbody,\nhtml {\n    height: 100%;\n    width: 100%;\n}\n\n\n\n#board-wrapper {\n    display: flex;\n    gap: 10%;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    width: 100%;\n\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    max-width: 550px;\n    margin: 0 auto;\n\n}\n\n.cell {\n    border: 1px solid black;\n    padding: 16px;\n}\n\n.cell:hover {\n    background-color: aquamarine;\n    cursor: pointer;\n}\n\n.board-id {\n    text-align: center;\n\n}\n\n.main-title {\n    display: flex;\n    align-items: center;\n    margin: 14px 150px;\n    justify-content: space-between;\n}\n\n.inactive {\n    display: none;\n}\n\n.color-info-wrapper {\n    margin-top: 1.7rem;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 4.2rem;\n}\n\n.color-information {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: inherit;\n}\n\n\n.color-block {\n    height: 1em;\n    width: 1em;\n    border: 1px solid black;\n}\n\n#restart-btn {\n    position: fixed;\n    left: 50%;\n    padding: .8rem;\n    font-size: 32px;\n    font-weight: 800;\n    margin-top: 8px;\n}\n\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;;IAEI,YAAY;IACZ,WAAW;AACf;;;;AAIA;IACI,aAAa;IACb,QAAQ;IACR,mBAAmB;IACnB,uBAAuB;IACvB,YAAY;IACZ,WAAW;;AAEf;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,gBAAgB;IAChB,cAAc;;AAElB;;AAEA;IACI,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,4BAA4B;IAC5B,eAAe;AACnB;;AAEA;IACI,kBAAkB;;AAEtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,8BAA8B;AAClC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,cAAc;AAClB;;;AAGA;IACI,WAAW;IACX,UAAU;IACV,uBAAuB;AAC3B;;AAEA;IACI,eAAe;IACf,SAAS;IACT,cAAc;IACd,eAAe;IACf,gBAAgB;IAChB,eAAe;AACnB",sourcesContent:["html {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\nbody,\nhtml {\n    height: 100%;\n    width: 100%;\n}\n\n\n\n#board-wrapper {\n    display: flex;\n    gap: 10%;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    width: 100%;\n\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    max-width: 550px;\n    margin: 0 auto;\n\n}\n\n.cell {\n    border: 1px solid black;\n    padding: 16px;\n}\n\n.cell:hover {\n    background-color: aquamarine;\n    cursor: pointer;\n}\n\n.board-id {\n    text-align: center;\n\n}\n\n.main-title {\n    display: flex;\n    align-items: center;\n    margin: 14px 150px;\n    justify-content: space-between;\n}\n\n.inactive {\n    display: none;\n}\n\n.color-info-wrapper {\n    margin-top: 1.7rem;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 4.2rem;\n}\n\n.color-information {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: inherit;\n}\n\n\n.color-block {\n    height: 1em;\n    width: 1em;\n    border: 1px solid black;\n}\n\n#restart-btn {\n    position: fixed;\n    left: 50%;\n    padding: .8rem;\n    font-size: 32px;\n    font-weight: 800;\n    margin-top: 8px;\n}\n\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=o.base?l[0]+o.base:l[0],d=a[s]||0,p="".concat(s," ").concat(d);a[s]=d+1;var u=t(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(A);else{var m=r(A,o);o.byIndex=c,n.splice(c,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var l=o(e,r),s=0;s<a.length;s++){var d=t(a[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),i=t.n(a),c=t(565),l=t.n(c),s=t(216),d=t.n(s),p=t(589),u=t.n(p),A=t(890),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=d(),n()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const h=10;class f{constructor(){this.missed_shots=[],this.board=[];for(let e=0;e<h;e++){let n=[];for(let t=0;t<h;t++)n.push({ship_type:null,was_hit:null,row:e,col:t});this.board.push(n)}}placeShip(e,n,t){for(;t+e.length>h;)t--;if(!g(n,t))throw new Error("Cant place ship there");if(!this.board[n].slice(t,t+e.length).every((({ship_type:e})=>null===e)))return console.log("Cant place ships on top of each other"),!1;for(let o of e.decks)this.board[n][t]=o,t++;return!0}receiveAttack(e,n){return!g(e,n)||this.board[e][n].was_hit?(console.log("You are unable to attack this position"),!1):(this.missed_shots.find((t=>t.row===e&&t.col===n))||this.board[e][n].ship_type||this.missed_shots.push({row:e,col:n}),this.board[e][n].was_hit=!0,!0)}allShipSunk(){return this.board.reduce(((e,n)=>e.concat(n))).filter((({ship_type:e})=>null!=e)).every((({was_hit:e})=>e))}shot_spots(){return this.board.reduce(((e,n)=>e.concat(n))).filter((({was_hit:e})=>!0===e))}was_hit(e){return!!e.was_hit}resetBoard(){this.missed_shots=[],this.board=[];for(let e=0;e<h;e++){let n=[];for(let t=0;t<h;t++)n.push({ship_type:null,was_hit:null,row:e,col:t});this.board.push(n)}}}function g(e,n){return e>=0&&e<h&&n>=0&&n<h}function b(e,n){n.forEach((n=>{let t;do{t=C(e,n)}while(!t);e.placeShip(n,t.row,t.col)}))}function C(e,n){let t=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());return!!e.board[t].slice(o,o+n.length).every((({ship_type:e})=>null===e))&&{row:t,col:o}}function y(e,n=!0,t=!1){return{name:e,turn:n,is_AI:t,setName:n=>{n&&(e=n)},startTurn:()=>{n||(n=!0)},endTurn:e=>{n&&(n=!1,e.startTurn())},getTurn:()=>n,getName:()=>e}}function v(e){let n;switch(e){case 2:n="Destroyer";break;case 3:n="Submarine";break;case 4:n="Battleship";break;case 5:n="Carrier"}const t=[];for(let o=0;o<e;o++)t.push({ship_type:n,was_hit:null});if(e>5||e<2)throw new Error("The ship length is between 3-5");return{length:e,decks:t,hit:e=>{if(t[e].was_hit)throw new Error("This place was already hit");t[e].was_hit=!0},isSunk:()=>t.every((e=>!0===e.was_hit))}}function I(){return[v(2),v(2),v(3),v(4),v(4),v(5)]}const w=document.querySelector(".main-content");function B(e,n){let t;switch(n.is_AI){case!1:t=document.getElementById("player-board");break;case!0:t=document.getElementById("cpu-board")}console.log(t);for(let o=0;o<e.board.length;o++)for(let r=0;r<e.board[o].length;r++){let a=document.createElement("div");a.className="cell",a.dataset.row=o,a.dataset.col=r,n.is_AI||(a.style.pointerEvents="none"),null==e.board[o][r].ship_type||n.is_AI||(a.style.backgroundColor="Blue"),t.appendChild(a)}}function x(e,n){n instanceof f&&(n.board[e.dataset.row][e.dataset.col].ship_type?e.style.backgroundColor="green":e.style.backgroundColor="red")}const E=document.querySelector(".main-title"),k=document.querySelector(".main-content");document.querySelector("control-panel");let _=y("",!0,!1),S=y("CPU",!1,!0);document.addEventListener("DOMContentLoaded",(()=>{!function(){const e=document.createElement("h1");e.textContent="Battleship",e.id="game-title";const n=document.createElement("a");n.href="https://www.hasbro.com/common/instruct/battleship.pdf",n.textContent="Rules",n.id="game-rules";const t=document.createElement("input");t.type="text",t.placeholder="Enter your name",t.id="p-name-input";const o=document.createElement("input");o.type="submit",o.value="Start Game",o.id="start-game",E.appendChild(e),E.appendChild(n),k.appendChild(t),k.appendChild(o)}();const e=document.getElementById("start-game"),n=(document.getElementById("test-name"),new f),t=new f;b(n,I()),b(t,I()),console.log(n),console.log(t),e.addEventListener("click",(function(){!function(e){const n=document.getElementById("p-name-input");n&&n.value.length>0&&(e.name=n.value,console.log(e))}(_),function(){const e=document.createElement("div");e.className="game-content",document.createElement("h2").textContent="Player´s Board";const n=document.createElement("div");n.id="board-wrapper";const t=document.createElement("div");t.className="board",t.id="player-board";const o=document.createElement("div");o.className="board",o.id="cpu-board";const r=document.createElement("div");r.className="color-info-wrapper";const a=document.createElement("div");a.className="color-information",a.id="green-information";const i=document.createElement("div");i.className="color-block",i.style.backgroundColor="green";const c=document.createElement("p");c.className="color-info-text",c.textContent="Hit",a.appendChild(i),a.appendChild(c);const l=document.createElement("div");l.className="color-information",l.id="red-information";const s=document.createElement("div");s.className="color-block",s.style.backgroundColor="red";const d=document.createElement("p");d.className="color-info-text",d.textContent="Missed",l.appendChild(s),l.appendChild(d);const p=document.createElement("div");p.className="color-information",p.id="blue-information";const u=document.createElement("div");u.className="color-block",u.style.backgroundColor="blue";const A=document.createElement("p");A.className="color-info-text",A.textContent="Alive board",p.appendChild(u),p.appendChild(A);const m=document.createElement("button");m.textContent="Restart",m.className="inactive",m.id="restart-btn",r.appendChild(p),r.appendChild(l),r.appendChild(a),e.appendChild(n),n.appendChild(t),n.appendChild(o),e.appendChild(r),e.appendChild(m),function(e){for(;e.firstChild;)e.removeChild(e.firstChild)}(w),w.appendChild(e)}(),B(n,_),B(t,S);const e=document.getElementById("cpu-board").querySelectorAll(".cell"),o=document.getElementById("player-board");e.forEach((e=>{e.addEventListener("click",(()=>{if(t.receiveAttack(e.dataset.row,e.dataset.col)){x(e,t);let r=function(e){let n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());if(!(e instanceof f))return!1;for(;e.was_hit(e.board[t][n]);)n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());return e.receiveAttack(t,n),{row:t,col:n}}(n);x(o.querySelector(`[data-row="${r.row.toString()}"][data-col="${r.col.toString()}"]`),n),(t.allShipSunk()||n.allShipSunk())&&function(){const e=document.getElementById("restart-btn");document.getElementById("cpu-board").querySelectorAll(".cell").forEach((e=>{e.style.pointerEvents="none"})),e.className="active"}()}}))}))}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,