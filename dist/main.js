(()=>{"use strict";var e={890:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,"html {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\nbody,\nhtml {\n    height: 100%;\n    width: 100%;\n}\n\n.game-content {\n    display: flex;\n\n    gap: 10%;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    width: 100%;\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    max-width: 550px;\n    margin: 0 auto;\n\n}\n\n.cell {\n    border: 1px solid black;\n    padding: 16px;\n}\n\n.cell:hover {\n    background-color: aquamarine;\n    cursor: pointer;\n}\n\n.board-id {\n    text-align: center;\n\n}\n\n.main-title {\n    display: flex;\n    align-items: center;\n    margin: 14px 150px;\n    justify-content: space-between;\n\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;;IAEI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;;IAEb,QAAQ;IACR,mBAAmB;IACnB,uBAAuB;IACvB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,gBAAgB;IAChB,cAAc;;AAElB;;AAEA;IACI,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,4BAA4B;IAC5B,eAAe;AACnB;;AAEA;IACI,kBAAkB;;AAEtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,8BAA8B;;AAElC",sourcesContent:["html {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\nbody,\nhtml {\n    height: 100%;\n    width: 100%;\n}\n\n.game-content {\n    display: flex;\n\n    gap: 10%;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    width: 100%;\n}\n\n.board {\n    display: grid;\n    grid: repeat(10, 1fr) / repeat(10, 1fr);\n    max-width: 550px;\n    margin: 0 auto;\n\n}\n\n.cell {\n    border: 1px solid black;\n    padding: 16px;\n}\n\n.cell:hover {\n    background-color: aquamarine;\n    cursor: pointer;\n}\n\n.board-id {\n    text-align: center;\n\n}\n\n.main-title {\n    display: flex;\n    align-items: center;\n    margin: 14px 150px;\n    justify-content: space-between;\n\n}"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var p=n(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var m=o(h,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var c=r(e,o),l=0;l<a.length;l++){var d=n(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),i=n.n(a),s=n(565),c=n.n(s),l=n(216),d=n.n(l),u=n(589),p=n.n(u),h=n(890),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),t()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;class A{constructor(){this.missed_shots=[],this.board=[];for(let e=0;e<10;e++){let t=[];for(let n=0;n<10;n++)t.push({ship_type:null,was_hit:null,row:e,col:n});this.board.push(t)}}placeShip(e,t,n){for(;n+e.length>10;)n--;if(!f(t,n))throw new Error("Cant place ship there");if(!this.board[t].slice(n,n+e.length).every((({ship_type:e})=>null===e)))return console.log("Cant place ships on top of each other"),!1;for(let r of e.decks)this.board[t][n]=r,n++;return!0}receiveAttack(e,t){return!f(e,t)||this.board[e][t].was_hit?(console.log("You are unable to attack this position"),!1):(this.missed_shots.find((n=>n.row===e&&n.col===t))||this.board[e][t].ship_type||this.missed_shots.push({row:e,col:t}),this.board[e][t].was_hit=!0,!0)}allShipSunk(){return this.board.reduce(((e,t)=>e.concat(t))).filter((({ship_type:e})=>null!=e)).every((({was_hit:e})=>e))}shot_spots(){return this.board.reduce(((e,t)=>e.concat(t))).filter((({was_hit:e})=>!0===e))}was_hit(e){return!!e.was_hit}}function f(e,t){return e>=0&&e<10&&t>=0&&t<10}function g(e,t){t.forEach((t=>{let n;do{n=y(e,t)}while(!n);e.placeShip(t,n.row,n.col)}))}function y(e,t){let n=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());return!!e.board[n].slice(r,r+t.length).every((({ship_type:e})=>null===e))&&{row:n,col:r}}function b(e,t=!0,n=!1){return{name:e,turn:t,is_AI:n,setName:t=>{t&&(e=t)},startTurn:()=>{t||(t=!0)},endTurn:e=>{t&&(t=!1,e.startTurn())},getTurn:()=>t,getName:()=>e}}function v(e){let t;switch(e){case 2:t="Destroyer";break;case 3:t="Submarine";break;case 4:t="Battleship";break;case 5:t="Carrier"}const n=[];for(let r=0;r<e;r++)n.push({ship_type:t,was_hit:null});if(e>5||e<2)throw new Error("The ship length is between 3-5");return{length:e,decks:n,hit:e=>{if(n[e].was_hit)throw new Error("This place was already hit");n[e].was_hit=!0},isSunk:()=>n.every((e=>!0===e.was_hit))}}function C(){return[v(2),v(2),v(3),v(4),v(4),v(5)]}const w=document.querySelector(".main-content");function I(e,t){let n;switch(t.is_AI){case!1:n=document.getElementById("player-board");break;case!0:n=document.getElementById("cpu-board")}console.log(n);for(let r=0;r<e.board.length;r++)for(let o=0;o<e.board[r].length;o++){let a=document.createElement("div");a.className="cell",a.dataset.row=r,a.dataset.col=o,a.dataset.was_hit=e.board[r][o].was_hit,a.dataset.ship_type=e.board[r][o].ship_type,console.log(a.dataset.ship_type),t.is_AI||(a.style.pointerEvents="none"),"null"==a.dataset.ship_type||t.is_AI||(a.style.backgroundColor="Blue"),n.appendChild(a)}}const E=document.querySelector(".main-title"),B=document.querySelector(".main-content");document.querySelector("control-panel"),document.addEventListener("DOMContentLoaded",(()=>{!function(){const e=document.createElement("h1");e.textContent="Battleship",e.id="game-title";const t=document.createElement("a");t.href="https://www.hasbro.com/common/instruct/battleship.pdf",t.textContent="Rules",t.id="game-rules";const n=document.createElement("input");n.type="text",n.placeholder="Enter your name",n.id="p-name-input";const r=document.createElement("input");r.type="submit",r.value="Start Game",r.id="start-game";const o=document.createElement("input");o.type="submit",o.value="Test",o.id="test-name",E.appendChild(e),E.appendChild(t),B.appendChild(n),B.appendChild(r),B.appendChild(o)}();let e=b("",!0,!1),t=b("CPU",!1,!0);const n=document.getElementById("start-game"),r=document.getElementById("test-name");n.addEventListener("click",(function(){!function(e){const t=document.getElementById("p-name-input");t&&t.value.length>0&&(e.name=t.value,console.log(e))}(e),function(){const e=document.createElement("div");e.className="game-content",document.createElement("h2").textContent="Player´s Board";const t=document.createElement("div");t.className="board",t.id="player-board";const n=document.createElement("div");n.className="board",n.id="cpu-board",e.appendChild(t),e.appendChild(n),function(e){for(;e.firstChild;)e.removeChild(e.firstChild)}(w),w.appendChild(e)}();let n=new A,r=new A;g(n,C()),g(r,C()),console.log(n),console.log(r),I(n,e),I(r,t),document.getElementById("cpu-board").querySelectorAll(".cell").forEach((e=>{e.addEventListener("click",(()=>{var t;r.receiveAttack(e.dataset.row,e.dataset.col),"null"!=(t=e).dataset.ship_type?t.style.backgroundColor="green":t.style.backgroundColor="red",t.style.pointerEvents="none",t.dataset.was_hit=!0}))}))})),r.addEventListener("click",(function(){console.log(e.name)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,